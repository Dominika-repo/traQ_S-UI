diff --git a/node_modules/vue-textarea-autosize/dist/vue-textarea-autosize.esm.js b/node_modules/vue-textarea-autosize/dist/vue-textarea-autosize.esm.js
index 7fe8a68..9abb800 100644
--- a/node_modules/vue-textarea-autosize/dist/vue-textarea-autosize.esm.js
+++ b/node_modules/vue-textarea-autosize/dist/vue-textarea-autosize.esm.js
@@ -1,15 +1,10 @@
 /*!
- * vue-textarea-autosize v1.1.1 
- * (c) 2019 Saymon
+ * vue-textarea-autosize v1.1.1-patched
+ * (c) 2020 Saymon
  * Released under the MIT License.
  */
-//
-//
-//
-//
-//
-//
-//
+import { withDirectives, openBlock, createBlock, vModelText } from 'vue';
+
 var script = {
   name: 'TextareaAutosize',
   props: {
@@ -75,7 +70,7 @@ var script = {
     },
     val: function val(_val) {
       this.$nextTick(this.resize);
-      this.$emit('input', _val);
+      this.$emit('input-value', _val);
     },
     minHeight: function minHeight() {
       this.$nextTick(this.resize);
@@ -123,127 +118,22 @@ var script = {
   }
 };
 
-function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier
-/* server only */
-, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
-  if (typeof shadowMode !== 'boolean') {
-    createInjectorSSR = createInjector;
-    createInjector = shadowMode;
-    shadowMode = false;
-  } // Vue.extend constructor export interop.
-
-
-  var options = typeof script === 'function' ? script.options : script; // render functions
-
-  if (template && template.render) {
-    options.render = template.render;
-    options.staticRenderFns = template.staticRenderFns;
-    options._compiled = true; // functional template
-
-    if (isFunctionalTemplate) {
-      options.functional = true;
-    }
-  } // scopedId
-
-
-  if (scopeId) {
-    options._scopeId = scopeId;
-  }
-
-  var hook;
-
-  if (moduleIdentifier) {
-    // server build
-    hook = function hook(context) {
-      // 2.3 injection
-      context = context || // cached call
-      this.$vnode && this.$vnode.ssrContext || // stateful
-      this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional
-      // 2.2 with runInNewContext: true
-
-      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
-        context = __VUE_SSR_CONTEXT__;
-      } // inject component styles
-
-
-      if (style) {
-        style.call(this, createInjectorSSR(context));
-      } // register component module identifier for async chunk inference
-
-
-      if (context && context._registeredComponents) {
-        context._registeredComponents.add(moduleIdentifier);
-      }
-    }; // used by ssr in case component is cached and beforeCreate
-    // never gets called
-
-
-    options._ssrRegister = hook;
-  } else if (style) {
-    hook = shadowMode ? function () {
-      style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));
-    } : function (context) {
-      style.call(this, createInjector(context));
-    };
-  }
-
-  if (hook) {
-    if (options.functional) {
-      // register for functional component in vue file
-      var originalRender = options.render;
-
-      options.render = function renderWithStyleInjection(h, context) {
-        hook.call(context);
-        return originalRender(h, context);
-      };
-    } else {
-      // inject component registration as beforeCreate hook
-      var existing = options.beforeCreate;
-      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
-    }
-  }
-
-  return script;
+function render(_ctx, _cache, $props, $setup, $data, $options) {
+  return withDirectives((openBlock(), createBlock("textarea", {
+    style: $options.computedStyles,
+    "onUpdate:modelValue": _cache[1] || (_cache[1] = $event => ($data.val = $event)),
+    onFocus: _cache[2] || (_cache[2] = (...args) => ($options.resize(...args)))
+  }, null, 36)), [
+    [vModelText, $data.val]
+  ])
 }
 
-var normalizeComponent_1 = normalizeComponent;
-
-/* script */
-const __vue_script__ = script;
-
-/* template */
-var __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('textarea',{directives:[{name:"model",rawName:"v-model",value:(_vm.val),expression:"val"}],style:(_vm.computedStyles),domProps:{"value":(_vm.val)},on:{"focus":_vm.resize,"input":function($event){if($event.target.composing){ return; }_vm.val=$event.target.value;}}})};
-var __vue_staticRenderFns__ = [];
-
-  /* style */
-  const __vue_inject_styles__ = undefined;
-  /* scoped */
-  const __vue_scope_id__ = undefined;
-  /* module identifier */
-  const __vue_module_identifier__ = undefined;
-  /* functional template */
-  const __vue_is_functional_template__ = false;
-  /* style inject */
-  
-  /* style inject SSR */
-  
-
-  
-  var TextareaAutosize = normalizeComponent_1(
-    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
-    __vue_inject_styles__,
-    __vue_script__,
-    __vue_scope_id__,
-    __vue_is_functional_template__,
-    __vue_module_identifier__,
-    undefined,
-    undefined
-  );
+script.render = render;
 
-var version = '1.1.1';
+var version = '1.1.1-patched';
 
 var install = function install(Vue) {
-  Vue.component('TextareaAutosize', TextareaAutosize);
+  Vue.component('TextareaAutosize', script);
 };
 
 var plugin = {
